<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 冰火岛</title>
    <link>https://robertlee77.github.io/posts/</link>
    <description>Recent content in Posts on 冰火岛</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 19 Sep 2019 11:00:46 +0800</lastBuildDate>
    
	<atom:link href="https://robertlee77.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>设计模式-04</title>
      <link>https://robertlee77.github.io/posts/design-pattern-04/</link>
      <pubDate>Thu, 19 Sep 2019 11:00:46 +0800</pubDate>
      
      <guid>https://robertlee77.github.io/posts/design-pattern-04/</guid>
      <description> 设计原则  依赖倒置原则：要依赖抽象，不要依赖具体类。  工厂模式(Factory Pattern)  简单工厂 工厂方法模式：定义了一个创建对象的接口，单由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。 抽象工厂模式：提供一个接口，用于创建相关或者依赖类的家族，而不需要指定具体类。  </description>
    </item>
    
    <item>
      <title>设计模式-03</title>
      <link>https://robertlee77.github.io/posts/design-pattern-03/</link>
      <pubDate>Wed, 18 Sep 2019 15:13:07 +0800</pubDate>
      
      <guid>https://robertlee77.github.io/posts/design-pattern-03/</guid>
      <description>设计原则  类应该对扩展开放，对修改关闭。  装饰者模式 动态的将责任附加个对象。装饰者提供了比继承更有弹性的替代方案。</description>
    </item>
    
    <item>
      <title>设计模式-02</title>
      <link>https://robertlee77.github.io/posts/design-pattern-02/</link>
      <pubDate>Tue, 17 Sep 2019 21:14:42 +0800</pubDate>
      
      <guid>https://robertlee77.github.io/posts/design-pattern-02/</guid>
      <description>设计原则  为交互对象之间的松耦合设计而努力。松耦合能够应对变化，是因为它把交互对象间的依赖降到了最低。  观察者模式 定义了对象之间的一对多依赖关系，当一个对象的状态发生改变，其它依赖者会收到通知。</description>
    </item>
    
    <item>
      <title>设计模式-01</title>
      <link>https://robertlee77.github.io/posts/design-pattern-01/</link>
      <pubDate>Sat, 14 Sep 2019 10:35:40 +0800</pubDate>
      
      <guid>https://robertlee77.github.io/posts/design-pattern-01/</guid>
      <description>设计原则  找出应用中可能需要变化之处，把它独立出来，不要和不变的代码混在一起。 针对接口编程，而不要针对实现编程。 多用组合，少用继承。  策略模式（strategy pattern） 策略模式定义了算法族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。</description>
    </item>
    
  </channel>
</rss>